프로그래밍 언어
본래 컴퓨터는 이진수로 통신해야했으며 기존에 우리가 쓰던 영어또한 이진수로 변환해서 
짰었어야 한다.(ex int i=0;(x) 010110011001(o)) 하지만 이진수 조합을 할 필요 없이
인간의 언어로 프로그램을 짤 수 있는 언어가 이제 프로그래밍 언어이다.
우리는 프로그래밍 언어의 한 종류인 자바를 배우는 것이다!
(암기x 그냥 설명)
 


변수

변수는 기본적으로 선언, 초기화로 나뉜다.

ex)
int a;//(선언)
a=10;//(초기화) 이 과정은 앞단에서 자료형이 무엇인가 선언했으며 10이라는 숫자를 메모리에 할당한 과정이다.
(암기x 그냥 설명)



자료형

기본형(Primitive Type)

앞 글자만 따서 ('논문정실') 외우기!

논리형 boolean
문자형 char
정수형 short byte int long
실수형 double float



참조형(Reference Type)
주소값을 할당하고 있는 자료형



**참조형은 주소 값을 가지고 있는 자료형이다!
기본형을 제외한 모든 자료형은 참조형으로 봐야한다!
참조형의 범위가 방대하니 기본형을 외워두자!(암기x 그냥 설명)




추가로 상수라는 개념
변수 <->상수          상반적인 의미
가변      불변
(암기x 그냥 설명)





상수
final 예약어를 사용하여 선언 초기화
final (자료형) (변수명) = (값);

리터럴 상수
고정된 값 자체(1,2,3,4,5,6,7,8,9,10... a,b,c,d,e,f... 가나다라....)




ex) (암기x 그냥 설명)
int a = 10;
이를 일반화 시키면
(자료형) (변수명) = (리터럴);
로 나타낼 수 있다!




제어문

조건문
if

if(조건식){
(실행문1)
}
else{
(실행문2)
}

if~else if~else


if(조건식1){
(실행문1)
}
else if(조건식2){
(실행문2)
}
.
.
.

else{
(실행문3)
}


switch~case

switch(값1){

case 값2: 실행문1
	break;
case 값3: 실행문2
	break;
case 값4: 실행문3
	break;
default:	실행문4

// default 절에 굳이 break문 안써줘도 된다.
}



반복문

원리:반복문의 조건식이 false일때까지 반복 실행된다고 보면 된다.


for

for(초기화식;조건식;증감식){
	실행문
}


향상 for

for(변수:자료구조){
	실행문
}





while

while(조건식){
(실행문)
}





do~while
do{
실행문
}while(조건식);

//마지막 세미콜론 필수! 안해주면 syntax error 난다.


제어문 파트는 연습을 많이 하는 것을 추천!



배열(자료구조의 일종)
배열은 참조형 형태의 자료형이다.(주소값을 가지고 있음)

**선언&초기화
(자료형)[] (변수명) = new (자료형)[(배열 크기)];

(자료형)[] << 이 자체도 하나의 자료형으로 봐도 된다.

여기서 알게 되는 점은 
참조형들은 new 예약어를 사용하여 생성하며 대입연산자로 초기화한다는 점!


이것을 기초로 이중으로도 가능하다.


이차원 배열

배열 자체를 담는 또 다른 배열

(자료형)[][] (변수명) = new (자료형)[(배열 크기)][(배열크기)];

이런식이다.

(자료형)[] << 이 자료형을 담는 배열을 만든다고 보면 된다.




클래스
현실세계의 물체를 컴퓨터의 자료형으로 표현한 것으로 보면 된다.

클래스 구성요소

필드 : 물체의 속성
메소드 : 물체의 행위

//생성자도 필수긴 하나 생성자도 메소드의 일종이며 특수한 메소드로 파악하면 된다.
생성자를 따로 정의하지 않으면 디폴트 생성자가 만들어지며 생성자가 하나라도 있다면
만들어지지 않는다.(현실에서 매칭시키기에는 무리가 있는 것.. 그냥 외우는 수 밖에 없..)



ex)붕어빵을 클래스로 정의한다면?
class 붕어빵{

겉의 재료=밀가루 반죽;
내부 재료= 팥;

//붕어빵은 따로 행위를 할 수 있는 물체가 아니므로 메소드를 만들 필요 없음
}
한글로 굳이 표기하자면 이렇다.




추상 클래스
추상메소드를 하나이상 가지고 있는 클래스를 추상 클래스라고 한다.
예약어 abstract

인터페이스
소프트웨어 내에 규정되어 있는 규약을 의미
구성 요소
상수
추상 메소드(default method, private method)


열거체
상수들의 집합을 열거체라고 한다. 접근하는 것은 클래스와 유사

익명 클래스
일회용으로 사용하는 클래스를 말함. 

내부 클래스
클래스 내부에 또 다른 클래스를 정의한 것을 내부클래스라고 말한다.
접근 방식 new ExternalClass().new InternalClass();
외부에 있는 클래스가 반드시 메모리에 할당되어야 접근 가능한 클래스

Collection
List add get set
ArrayList, LinkedList(Queue), Stack,Vector 
Set put get set
--
Map put get set

(기본 stream 최종연산인 collect메소드로 리턴 되는 자료구조는 hash임)




오류
프로그램 작성/실행중에 비정상적인 종료나 정지하고 팝업창이 뜨는 현상을 오류라고 말한다.

Error
복구할 수 없는 오류(StackOverflow,HeapOverflow등이 존재)
Compile Error
컴파일 도중에 뜨는 에러
Runtime Error
프로그램 실행 중에 뜨는 에러
Logical Error
위의 컴파일 에러나 런타임 에러와는 별개로 개발자의 의도와는 다르게 발생하는 에러

Exception
복구할 수 있는 오류(IOException, NumberFormatException, ArraysIndexOutOfBoundsException
ArithmaticException 등..)


복구할 수 있는 예외처리 3가지 방법
try~catch~finally 사용하여 예외를 막는 방법
try문은 일단 실행되며 try문에서 실행하다 예외가 발생하면 중지하고 catch문을 실행
finally문은 try,catch와 별개로 무조건 실행되는 실행문이다.

throw로 임의로 사용자의 의도로 예외를 일으켜 사전에 방지하는 방법

throws로 메소드를 호출한 측에 예외처리 책임을 전가하여 해결하는 방법

+)
예외를 잡으면서 동시에 자원을 반환하는 방법
try(객체 선언, 생성)
try문의 괄호 안에 작성한다면 try문을 빠져 나가게 될 경우 자동적으로 시스템 자원을 반환해준다.


Generic(제네릭)
데이터 타입을 파라미터로 사용하는 기능을 제네릭이라고 한다.

제네릭 클래스, 제네릭 메소드 기능들이 존재

제네릭 클래스는 
class 클래스명<제네릭>{
클래스 정의 부분
}

제네릭 메소드는
(접근 제어자) <제네릭> (리턴 여부 결정 데이터 타입) (메소드 명)( (인자) ){구현부}


접근 제어자
public 모든 범위 접근 가능한 접근 제어자
protected 같은 패키지 내거나 상속관계가 존재할 경우 접근 가능한 접근 제어자
(default) 같은 패키지 내에서 접근가능한 접근 제어자
private 같은 클래스 내에서만 접근 가능한 접근 제어자



함수형 프로그래밍
객체 지향 프로그래밍의 메소드 접근방식인 객체생성 후 메소드 접근 과정을 줄여
함수 자체를 변수로 할당하능하게끔 한 패러다임 

람다 함수(함수형 프로그래밍 방식 중 하나 자바 파트)
인터페이스 정의 >> 해당 인터페이스를 자료형으로 객체 생성 후 함수형태로 변수에 할당하여 구현시킴
>>객체명.메소드명( (파라미터) );

함수형 인터페이스

Consumer
input o output x
Supplier
input x output o
Function 제네릭 2개이상도 가능
input o output o
Predicate 리턴 값이 boolean이라는 특징
input o output o
Operator 제네릭 1개만 가능
input o output o



Stream?
사전적 정의: 입출력 데이터의 이상화된 흐름

Stream 연산 과정
스트림 생성 >> 중간연산 >>최종연산(중간연산은 필수가 아니다.)

Stream<type>
IntStream
DoubleStream
.
.
.
등으로 생성 가능(스트림)

또한 자료구조(Map 제외)에서 스타트 하는 방법도 존재

컬렉션.stream().중간연산. ........ .최종연산


배열 Arrays.stream(배열 변수명).중간연산. ........ .최종연산

+)문자열도 가능
split("") >> 문자열을 각각 String 형의 원소로 가지는 배열로 리턴 가능
toCharArray() >> 문자열을 char형 원소로 가지는 배열로 리턴 가능
다음에 Arrays.stream(ⓐ) ⓐ에 집어넣으면 스트림 생성


중간 연산
map, filter, flatMap, peek, boxed, mapToInt, parallel, gernerate 등..
최종 연산
forEach, reduce, max, count, min, avg 등
단 max,count,min,avg는 리턴값이 OptionalInt라 getAsInt를 호출해야함.

파일 입출력
입력
reader

출력
writer 

Input/OutputStream


BufferedReader/Writer 버퍼 공간을 활용하여 파일입출력 속도를 높인 객체

read/readLine  read메소드는 파일을 byte단위로 읽고 readLine은 줄 단위로 읽는 메소드
write() write메소드 해당 문자열을 byte 단위로 출력하는 메소드



